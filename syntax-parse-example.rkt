#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.1.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 31 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 1606 0 29 3 12 #"#lang racket"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 1 #" "
0 0 14 3 12 #"syntax/parse"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 15 3 12 #"syntax-parse"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 4 #"x:id"
0 0 25 3 1 #" "
0 0 14 3 3 #"..."
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 2 #"ok"
0 0 25 3 2 #"])"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 15 3 12 #"syntax-parse"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 2 #") "
0 0 22 3 2 #"#t"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 24 3 10 #"#:literals"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 9 #"test-expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"then-expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"else-expr"
0 0 25 3 2 #") "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 9 #"test-expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"then-expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"else-expr"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 15 3 12 #"syntax-parse"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 22 3 2 #"12"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 24 3 10 #"#:literals"
0 0 25 3 2 #" ("
0 0 15 3 6 #"define"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 6 #"var:id"
0 0 25 3 1 #" "
0 0 14 3 9 #"body:expr"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 2 #"ok"
0 0 25 3 2 #"])"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 15 3 12 #"syntax-parse"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 24 3 10 #"#:literals"
0 0 25 3 2 #" ("
0 0 15 3 6 #"define"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 8 #"d:define"
0 0 25 3 1 #" "
0 0 14 3 6 #"var:id"
0 0 25 3 1 #" "
0 0 14 3 9 #"body:expr"
0 0 25 3 2 #") "
0 0 22 3 2 #"#'"
0 0 14 3 1 #"d"
0 0 25 3 2 #"])"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 46 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 25 29 1 #"\n"
0 0 17 3 18 #";(define c (void))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 10 #"if-to-cond"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                         "
0 0 22 3 1 #"1"
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                         ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 2 #" )"
0 0 25 29 1 #"\n"
0 0 25 3 29 #"                             "
0 0 22 3 1 #"2"
0 0 25 29 1 #"\n"
0 0 25 3 30 #"                             ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 33 #"                                 "
0 0 22 3 1 #"5"
0 0 25 29 1 #"\n"
0 0 25 3 34 #"                                 ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 37 #"                                     "
0 0 22 3 1 #"3"
0 0 25 29 1 #"\n"
0 0 25 3 37 #"                                     "
0 0 22 3 1 #"4"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 2 #") "
0 0 22 3 1 #"2"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 2 #") "
0 0 22 3 1 #"3"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 2 #"])"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 7 #"parser1"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 13 #"syntax-parser"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"    [(("
0 0 14 3 3 #"~or"
0 0 25 3 2 #" ("
0 0 14 3 5 #"~once"
0 0 25 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 25 3 1 #" "
0 0 24 3 3 #"#:a"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 2 #") "
0 0 24 3 6 #"#:name"
0 0 25 3 1 #" "
0 0 19 3 13 #"\"#:a keyword\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 9 #"~optional"
0 0 25 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 25 3 1 #" "
0 0 24 3 3 #"#:b"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 2 #") "
0 0 24 3 6 #"#:name"
0 0 25 3 1 #" "
0 0 19 3 13 #"\"#:b keyword\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 4 #"~seq"
0 0 25 3 1 #" "
0 0 24 3 3 #"#:c"
0 0 25 3 1 #" "
0 0 14 3 1 #"z"
0 0 25 3 3 #")) "
0 0 14 3 3 #"..."
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 22 3 1 #"'"
0 0 14 3 2 #"ok"
0 0 25 3 3 #"]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 15 3 12 #"syntax-parse"
0 0 25 3 1 #" "
0 0 14 3 10 #"if-to-cond"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 24 3 10 #"#:literals"
0 0 25 3 2 #"( "
0 0 14 3 2 #"if"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"  [(("
0 0 14 3 3 #"~or"
0 0 25 3 2 #"  "
0 0 17 3 13 #";exactly once"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 17 3 2 #";("
0 0 17 3 9 #"~optional"
0 0 17 3 2 #" ("
0 0 17 3 4 #"~seq"
0 0 17 3 1 #" "
0 0 17 3 2 #"if"
0 0 17 3 1 #" "
0 0 17 3 9 #"test-expr"
0 0 17 3 1 #" "
0 0 17 3 9 #"then-expr"
0 0 17 3 1 #" "
0 0 17 3 12 #"else-expr)) "
0 0 17 3 13 #"; maximum one"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 4 #"~seq"
0 0 25 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 25 3 1 #" "
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 14 #"test-expr:expr"
0 0 25 3 1 #" "
0 0 14 3 14 #"then-expr:expr"
0 0 25 3 2 #") "
0 0 14 3 3 #"..."
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 5 #"~once"
0 0 25 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 25 3 1 #" "
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 15 #"test-expr2:expr"
0 0 25 3 1 #" "
0 0 14 3 15 #"then-expr2:expr"
0 0 25 3 1 #" "
0 0 14 3 15 #"else-expr2:expr"
0 0 25 3 2 #") "
0 0 24 3 6 #"#:name"
0 0 25 3 1 #" "
0 0 19 3 14 #"\"If-last-part\""
0 0 25 3 4 #" )) "
0 0 14 3 3 #"..."
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 17 3 8 #";at will"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 22 3 2 #"#'"
0 0 14 3 10 #"else-expr2"
0 0 25 3 2 #"])"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 12 #"syntax-parse"
0 0 25 3 1 #" "
0 0 14 3 10 #"if-to-cond"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 24 3 10 #"#:literals"
0 0 25 3 1 #"("
0 0 14 3 2 #"if"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"  [("
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 9 #"test-expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"then-expr"
0 0 25 3 4 #" ((("
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 10 #"test-expr3"
0 0 25 3 1 #" "
0 0 14 3 10 #"then-expr3"
0 0 25 3 2 #") "
0 0 14 3 3 #"..."
0 0 25 3 2 #") "
0 0 14 3 3 #"..."
0 0 25 3 4 #" ) ("
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 10 #"test-expr2"
0 0 25 3 1 #" "
0 0 14 3 10 #"then-expr2"
0 0 25 3 1 #" "
0 0 14 3 10 #"else-expr2"
0 0 25 3 3 #")) "
0 0 22 3 2 #"#'"
0 0 14 3 10 #"test-expr2"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"   ])"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 15 3 12 #"syntax-parse"
0 0 25 3 1 #" "
0 0 14 3 10 #"if-to-cond"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 24 3 10 #"#:literals"
0 0 25 3 2 #"( "
0 0 14 3 2 #"if"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"  [(("
0 0 14 3 4 #"~and"
0 0 25 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 25 3 2 #" ("
0 0 14 3 4 #"~seq"
0 0 25 3 1 #" "
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 14 #"test-expr:expr"
0 0 25 3 1 #" "
0 0 14 3 14 #"then-expr:expr"
0 0 25 3 2 #") "
0 0 14 3 3 #"..."
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 14 3 4 #"~seq"
0 0 25 3 1 #" "
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 10 #"test-expr2"
0 0 25 3 1 #" "
0 0 14 3 10 #"then-expr2"
0 0 25 3 1 #" "
0 0 14 3 10 #"else-expr2"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 22 3 2 #"#'"
0 0 14 3 10 #"else-expr2"
0 0 25 3 2 #"])"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 10 #"test-expr2"
0 0 25 3 1 #" "
0 0 14 3 3 #"..."
0 0 25 3 1 #" "
0 0 14 3 10 #"then-expr2"
0 0 25 3 1 #" "
0 0 14 3 3 #"..."
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 9 #"test-expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"then-expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"else-expr"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 15 3 4 #"cond"
0 0 25 3 2 #" ["
0 0 14 3 10 #"test-expr2"
0 0 25 3 1 #" "
0 0 14 3 3 #"..."
0 0 25 3 1 #" "
0 0 14 3 10 #"then-expr2"
0 0 25 3 1 #" "
0 0 14 3 3 #"..."
0 0 25 3 2 #"] "
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ["
0 0 14 3 9 #"test-expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"then-expr"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 25 3 1 #" "
0 0 14 3 9 #"else-expr"
0 0 25 3 2 #"])"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 15 3 12 #"syntax-parse"
0 0 25 3 1 #" "
0 0 14 3 10 #"if-to-cond"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 24 3 10 #"#:literals"
0 0 25 3 1 #"("
0 0 14 3 2 #"if"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"~or"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 9 #"test-expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"then-expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"else-expr"
0 0 25 3 3 #") ("
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 9 #"test-expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"then-expr"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 10 #"test-expr1"
0 0 25 3 1 #" "
0 0 14 3 10 #"then-expr1"
0 0 25 3 4 #"))) "
0 0 22 3 2 #"#'"
0 0 14 3 9 #"test-expr"
0 0 25 3 3 #" ])"
0 0 25 29 1 #"\n"
0 0 17 3 23 #";;;;;;;;;;;; If to When"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 12 #"syntax-parse"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 2 #") "
0 0 22 3 2 #"#t"
0 0 25 3 2 #" ("
0 0 14 3 4 #"void"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 24 3 10 #"#:literals"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"  [("
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 9 #"test-expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"then-expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"else-expr"
0 0 25 3 2 #") "
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 15 3 4 #"when"
0 0 25 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 14 3 4 #"void"
0 0 25 3 3 #") ("
0 0 14 3 13 #"syntax->datum"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 14 3 9 #"else-expr"
0 0 25 3 3 #")) "
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 13 #"syntax->datum"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 15 3 4 #"when"
0 0 25 3 1 #" "
0 0 14 3 9 #"test-expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"then-expr"
0 0 25 3 5 #")))])"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 25 #";;;;;;;;;;;; If to Unless"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 12 #"syntax-parse"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 3 #") ("
0 0 14 3 4 #"void"
0 0 25 3 2 #") "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 24 3 10 #"#:literals"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"  [("
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 9 #"test-expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"then-expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"else-expr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 15 3 4 #"when"
0 0 25 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 14 3 4 #"void"
0 0 25 3 3 #") ("
0 0 14 3 13 #"syntax->datum"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 14 3 9 #"then-expr"
0 0 25 3 3 #")) "
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 13 #"syntax->datum"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 15 3 6 #"unless"
0 0 25 3 1 #" "
0 0 14 3 9 #"test-expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"else-expr"
0 0 25 3 5 #")))])"
0 0 25 29 1 #"\n"
0 0 17 3 51 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; if's to cond"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 15 3 12 #"syntax-parse"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 3 #") ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 2 #") "
0 0 22 3 2 #"#t"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #") "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 24 3 10 #"#:literals"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 9 #"test-expr"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 9 #"test-expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"then-expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"else-expr"
0 0 25 3 2 #") "
0 0 14 3 9 #"else-expr"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 18 #";;;;;;;;;;;;;;;;;;"
0 0 25 29 1 #"\n"
0 0 17 3 65
#";;Make for other types! and add ... for the rest of possibilities"
0 0 25 29 1 #"\n"
0 0 17 3 37 #";;(and (< x y) (< y z)) => (< x y z) "
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 15 3 12 #"syntax-parse"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 3 #") ("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 1 #" "
0 0 14 3 1 #"z"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 24 3 10 #"#:literals"
0 0 25 3 1 #"("
0 0 14 3 3 #"and"
0 0 25 3 1 #" "
0 0 14 3 1 #"<"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 3 #") ("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 1 #"v"
0 0 25 3 1 #" "
0 0 14 3 1 #"z"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 15 3 4 #"when"
0 0 25 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 25 3 2 #" ("
0 0 14 3 13 #"syntax->datum"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 14 3 1 #"y"
0 0 25 3 3 #") ("
0 0 14 3 13 #"syntax->datum"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 14 3 1 #"v"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 13 #"syntax->datum"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 1 #" "
0 0 14 3 1 #"z"
0 0 25 3 5 #")))])"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 21 #";;;;;;;;;;;;;;;;;;;;;"
0 0 25 29 1 #"\n"
0 0 17 3 39 #";;add ... for the rest of possibilities"
0 0 25 29 1 #"\n"
0 0 17 3 27 #";;(not (< x y)) => (>= x y)"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 15 3 12 #"syntax-parse"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 24 3 10 #"#:literals"
0 0 25 3 1 #"("
0 0 14 3 3 #"not"
0 0 25 3 1 #" "
0 0 14 3 1 #"<"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 13 #"syntax->datum"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 2 #">="
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 5 #")))])"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 27 #";;(not (>= x y)) => (< x y)"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 15 3 12 #"syntax-parse"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 2 #">="
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 24 3 10 #"#:literals"
0 0 25 3 1 #"("
0 0 14 3 3 #"not"
0 0 25 3 1 #" "
0 0 14 3 2 #">="
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 2 #">="
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 13 #"syntax->datum"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 5 #")))])"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 27 #";;(not (> x y)) => (<= x y)"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 15 3 12 #"syntax-parse"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 1 #">"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 24 3 10 #"#:literals"
0 0 25 3 1 #"("
0 0 14 3 3 #"not"
0 0 25 3 1 #" "
0 0 14 3 1 #">"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 1 #">"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 13 #"syntax->datum"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 2 #"<="
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 4 #"))])"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 27 #";;(not (<= x y)) => (> x y)"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 15 3 12 #"syntax-parse"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 2 #"<="
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 24 3 10 #"#:literals"
0 0 25 3 1 #"("
0 0 14 3 3 #"not"
0 0 25 3 1 #" "
0 0 14 3 2 #"<="
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 2 #"<="
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 13 #"syntax->datum"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 1 #">"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 5 #")))])"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 6 #";;;;;;"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 12 #"syntax-parse"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"="
0 0 25 3 2 #" ("
0 0 14 3 3 #"mod"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 2 #") "
0 0 22 3 2 #"#f"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 24 3 10 #"#:literals"
0 0 25 3 1 #"("
0 0 14 3 2 #"if"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"  [("
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 9 #"test-expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"then-expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"else-expr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 15 3 4 #"when"
0 0 25 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 25 3 2 #" ("
0 0 14 3 13 #"syntax->datum"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 14 3 9 #"then-expr"
0 0 25 3 3 #") ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 13 #"syntax->datum"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 14 3 9 #"else-expr"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 13 #"syntax->datum"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 3 #"not"
0 0 25 3 1 #" "
0 0 14 3 9 #"test-expr"
0 0 25 3 5 #")))])"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 24 #";;;;;;;;;;;;;;;;;;;;;;;;"
0 0 25 29 1 #"\n"
0 0 17 3 12 #"; weird test"
0 0 25 29 1 #"\n"
0 0 17 3 48 #";(define test (datum->syntax #f (not (<= 1 2))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 15 3 12 #"syntax-parse"
0 0 25 3 1 #" "
0 0 14 3 4 #"test"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 24 3 10 #"#:literals"
0 0 25 3 1 #"("
0 0 14 3 3 #"not"
0 0 25 3 1 #" "
0 0 14 3 2 #"<="
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 2 #"<="
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 13 #"syntax->datum"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 1 #">"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 5 #")))])"
0 0 25 29 1 #"\n"
0 0 17 3 106
(
 #";(#%app call-with-values lambda if #%app = #%app + quote 1 quote 2 q"
 #"uote 1 quote #f quote #t print-values)"
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 15 3 12 #"syntax-parse"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"#%app"
0 0 25 3 1 #" "
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 14 3 5 #"#%app"
0 0 25 3 1 #" "
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 5 #"quote"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 14 3 5 #"quote"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #") "
0 0 14 3 5 #"quote"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 14 3 5 #"quote"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 1 #" "
0 0 14 3 5 #"quote"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 24 3 10 #"#:literals"
0 0 25 3 1 #"("
0 0 14 3 5 #"#%app"
0 0 25 3 1 #" "
0 0 14 3 16 #"call-with-values"
0 0 25 3 1 #" "
0 0 15 3 6 #"lambda"
0 0 25 3 1 #" "
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 14 3 5 #"quote"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 5 #"#%app"
0 0 25 3 1 #" "
0 0 14 3 16 #"call-with-values"
0 0 25 3 1 #" "
0 0 15 3 6 #"lambda"
0 0 25 3 1 #" "
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 9 #"test-expr"
0 0 25 3 1 #" "
0 0 14 3 5 #"quote"
0 0 25 3 1 #" "
0 0 14 3 4 #"val3"
0 0 25 3 1 #" "
0 0 14 3 5 #"quote"
0 0 25 3 1 #" "
0 0 14 3 4 #"val4"
0 0 25 3 1 #" "
0 0 14 3 5 #"quote"
0 0 25 3 1 #" "
0 0 14 3 4 #"val5"
0 0 25 3 1 #" "
0 0 14 3 12 #"print-values"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 2 #"ok"
0 0 25 3 2 #"])"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 80
(
 #";syntax-parse-example.rkt:86:2: syntax-parse: expected non-empty cla"
 #"use body at:"
) 0 0 25 29 1 #"\n"
0 0 17 3 121
(
 #";((#%app call-with-v...l-with-values lambda if = quote print-values)"
 #" ((#%app call-with-values lambda if #%app = #%app ..."
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 3 #"arg"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"="
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 2 #") "
0 0 14 3 1 #"a"
0 0 25 3 2 #") "
0 0 22 3 2 #"#f"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 15 3 12 #"syntax-parse"
0 0 25 3 1 #" "
0 0 14 3 3 #"arg"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 24 3 10 #"#:literals"
0 0 25 3 1 #"("
0 0 14 3 2 #"if"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 2 #"if"
0 0 25 3 1 #" "
0 0 14 3 9 #"test-expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"then-expr"
0 0 25 3 1 #" "
0 0 14 3 9 #"else-expr"
0 0 25 3 3 #") ("
0 0 14 3 13 #"syntax->datum"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 3 #"not"
0 0 25 3 1 #" "
0 0 14 3 9 #"test-expr"
0 0 25 3 4 #"))])"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 19 #"define-syntax-class"
0 0 25 3 2 #" ("
0 0 14 3 13 #"nat-less-than"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"pattern"
0 0 25 3 1 #" "
0 0 14 3 5 #"x:nat"
0 0 25 3 1 #" "
0 0 24 3 6 #"#:when"
0 0 25 3 2 #" ("
0 0 14 3 1 #"<"
0 0 25 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 14 3 1 #"x"
0 0 25 3 2 #") "
0 0 14 3 1 #"n"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 12 #"syntax-parse"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"  [(("
0 0 14 3 4 #"~var"
0 0 25 3 1 #" "
0 0 14 3 5 #"small"
0 0 25 3 2 #" ("
0 0 14 3 13 #"nat-less-than"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 3 #")) "
0 0 14 3 3 #"..."
0 0 25 3 1 #" "
0 0 14 3 9 #"large:nat"
0 0 25 3 1 #" "
0 0 14 3 3 #"..."
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 5 #"small"
0 0 25 3 1 #" "
0 0 14 3 3 #"..."
0 0 25 3 2 #") "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 5 #"large"
0 0 25 3 1 #" "
0 0 14 3 3 #"..."
0 0 25 3 4 #"))])"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 12 #"syntax-parse"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 1 #"="
0 0 25 3 2 #" ("
0 0 14 3 6 #"lenght"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"  [("
0 0 14 3 1 #"="
0 0 25 3 2 #" ("
0 0 14 3 6 #"lenght"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 3 #") ("
0 0 14 3 13 #"syntax->datum"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 4 #"))])"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 12 #"syntax-parse"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 1 #"="
0 0 25 3 2 #" ("
0 0 14 3 6 #"lenght"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"  [("
0 0 14 3 1 #"="
0 0 25 3 2 #" ("
0 0 14 3 6 #"lenght"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 3 #") ("
0 0 14 3 13 #"syntax->datum"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 10 #"singleton?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 4 #"))])"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 12 #"syntax-parse"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 1 #"6"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 24 3 10 #"#:literals"
0 0 25 3 1 #"("
0 0 14 3 4 #"list"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"  [("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 1 #" "
0 0 14 3 3 #"..."
0 0 25 3 1 #" "
0 0 14 3 1 #"v"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 13 #"syntax->datum"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 1 #" "
0 0 14 3 3 #"..."
0 0 25 3 1 #" "
0 0 14 3 1 #"v"
0 0 25 3 4 #"))])"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #")) "
0 0 22 3 1 #"'"
0 0 25 3 2 #"(("
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #")("
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 2 #"(("
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #")("
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 12 #"syntax-parse"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #")) "
0 0 22 3 1 #"'"
0 0 25 3 2 #"(("
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #")("
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 24 3 10 #"#:literals"
0 0 25 3 1 #"("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 15 3 6 #"lambda"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 24 3 16 #"#:datum-literals"
0 0 25 3 1 #"("
0 0 14 3 1 #"l"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"  [("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 8 #"function"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #")) "
0 0 14 3 3 #"arg"
0 0 25 3 2 #") "
0 0 22 3 2 #"#'"
0 0 25 3 1 #"("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 8 #"function"
0 0 25 3 1 #" "
0 0 14 3 3 #"arg"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0           0
