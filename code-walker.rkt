#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.1.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 31 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 58 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 -1 1 #"\0"
0 10 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0 10 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 2481 0 29 3 12 #"#lang racket"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 1 #" "
0 0 14 3 11 #"racket/list"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 7 #"provide"
0 0 25 3 1 #" "
0 0 14 3 11 #"code-walker"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 7 #"provide"
0 0 25 3 1 #" "
0 0 14 3 12 #"test-visited"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 43 #";;;;;;;;;;; Definitions ;;;;;;;;;;;;;;;;;;;"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 11 #"syntax-list"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 3 #")) "
0 0 17 3 17 #";global, oh well "
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 7 #"visited"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"test-visited"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 22 #"\"Code-walker visited \""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 14 3 7 #"visited"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 43 #";;;;;;;;;; END Definitions ;;;;;;;;;;;;;;;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 38 #";;;;;;;;;; Prepare ;;;;;;;;;;;;;;;;;;;"
0 0 25 29 1 #"\n"
0 0 17 3 23 #";;;;;;;;;; Clean up AST"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"walk-trought"
0 0 25 3 1 #" "
0 0 14 3 7 #"program"
0 0 25 3 1 #" "
0 0 14 3 7 #"current"
0 0 25 3 1 #" "
0 0 14 3 4 #"next"
0 0 25 3 1 #" "
0 0 14 3 8 #"previous"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 4 #"next"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 11 #"\"Current: \""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 14 3 7 #"current"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 8 #"\"PAIR? \""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 25 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 25 3 1 #" "
0 0 14 3 4 #"next"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 17 3 30 #";(displayln (cdr program-aux))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 10 #"\"Syntax? \""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 25 3 2 #" ("
0 0 14 3 7 #"syntax?"
0 0 25 3 1 #" "
0 0 14 3 4 #"next"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"          [("
0 0 14 3 7 #"syntax?"
0 0 25 3 1 #" "
0 0 14 3 4 #"next"
0 0 25 3 2 #") "
0 0 17 3 27 #";Found syntax, go to there."
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 19 3 10 #"\" SYNTAX \""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 8 #"\"DATUM \""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 25 3 2 #" ("
0 0 14 3 13 #"syntax->datum"
0 0 25 3 1 #" "
0 0 14 3 7 #"current"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 17 3 34 #";(go-to-syntax (syntax-e current))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 3 #"aux"
0 0 25 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 25 3 1 #" "
0 0 14 3 7 #"current"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 25 3 2 #" ("
0 0 14 3 13 #"syntax->datum"
0 0 25 3 1 #" "
0 0 14 3 7 #"current"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 13 #"syntax-walker"
0 0 25 3 1 #" "
0 0 14 3 3 #"aux"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 3 #"aux"
0 0 25 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 3 #"aux"
0 0 25 3 2 #") "
0 0 14 3 4 #"null"
0 0 25 3 2 #" )"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"             )]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 19 3 11 #"\"NEXT PAIR\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 7 #"current"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ("
0 0 14 3 12 #"walk-trought"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 7 #"program"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 34 #"                                 ("
0 0 14 3 4 #"cadr"
0 0 25 3 1 #" "
0 0 14 3 7 #"program"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 34 #"                                 ("
0 0 14 3 4 #"cddr"
0 0 25 3 1 #" "
0 0 14 3 7 #"program"
0 0 25 3 2 #") "
0 0 25 29 1 #"\n"
0 0 25 3 33 #"                                 "
0 0 14 3 4 #"null"
0 0 25 3 8 #")))]))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"go-to-syntax"
0 0 25 3 1 #" "
0 0 14 3 17 #"program-structure"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 19 3 16 #"\"[go-to-syntax]\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 41 #"\"[go-to-syntax] program-structure null? \""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 17 #"program-structure"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"unless"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 17 #"program-structure"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 12 #"walk-trought"
0 0 25 3 1 #" "
0 0 14 3 17 #"program-structure"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 17 #"program-structure"
0 0 25 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 17 #"program-structure"
0 0 25 3 2 #") "
0 0 14 3 4 #"null"
0 0 25 3 3 #" ))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 19 3 39 #"\"!!!!!!!!!!!! END OF FILE !!!!!!!!!!!!\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"syntax-walker"
0 0 25 3 1 #" "
0 0 14 3 7 #"program"
0 0 25 3 1 #" "
0 0 14 3 7 #"current"
0 0 25 3 1 #" "
0 0 14 3 4 #"next"
0 0 25 3 1 #" "
0 0 14 3 8 #"previous"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 25 #";previous is not working."
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 27 #";(display \"Syntax-walker \")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 20 #";(displayln program)"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"iteration"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 10 #"syntax-ret"
0 0 25 3 1 #" "
0 0 14 3 4 #"null"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 19 3 15 #"\"Syntax-walker\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 1 #" "
0 0 14 3 4 #"loop"
0 0 25 3 3 #" (("
0 0 14 3 7 #"program"
0 0 25 3 1 #" "
0 0 14 3 7 #"program"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 7 #"current"
0 0 25 3 1 #" "
0 0 14 3 7 #"current"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 4 #"next"
0 0 25 3 1 #" "
0 0 14 3 4 #"next"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 8 #"previous"
0 0 25 3 1 #" "
0 0 14 3 8 #"previous"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 28 #"\"[Syntax-walker]  Current: \""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 14 3 7 #"current"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 25 #"\"[Syntax-walker]  PAIR? \""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 25 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 25 3 1 #" "
0 0 14 3 4 #"next"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 32 #"\"[Syntax-walker]  Syntax Next? \""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 25 3 2 #" ("
0 0 14 3 7 #"syntax?"
0 0 25 3 1 #" "
0 0 14 3 4 #"next"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 59
#";Need a test to know if it is a syntax node of the program."
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 34 #"\"[Syntax-walker]  Syntax Current \""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 25 3 2 #" ("
0 0 14 3 7 #"syntax?"
0 0 25 3 1 #" "
0 0 14 3 7 #"current"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 57 #"#|If #t must go and visit each syntax node of the program"
0 0 17 29 1 #"\n"
0 0 17 3 60
#"      Have a way if it is not true to go back in the code.|#"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 5 #"pair?"
0 0 25 3 1 #" "
0 0 14 3 4 #"next"
0 0 25 3 2 #") "
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 7 #"program"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 15 3 5 #"begin"
0 0 25 3 1 #" "
0 0 17 3 6 #";hack!"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 15 3 4 #"when"
0 0 25 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 9 #"iteration"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                 "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 19 3 11 #"\"SET MADE!\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 10 #"syntax-ret"
0 0 25 3 1 #" "
0 0 14 3 7 #"program"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 17 3 46 #";(set! syntax-list (cons syntax-list current))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 9 #"iteration"
0 0 25 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 25 3 1 #" "
0 0 14 3 9 #"iteration"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 4 #"loop"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 7 #"program"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 25 3 1 #" "
0 0 14 3 7 #"program"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cddr"
0 0 25 3 1 #" "
0 0 14 3 7 #"program"
0 0 25 3 2 #") "
0 0 14 3 7 #"current"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             )"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 19 3 58
#"\"!!!!!!!!!!!!!!!! This should not happen !!!!!!!!!!!!!!!!\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 18 #"\"!!!!!!!!!!!!!!!!\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 9 #"displayln"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 7 #"program"
0 0 25 3 2 #"))"
0 0 17 3 10 #"; do stuff"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 18 #"\"!!!!!!!!!!!!!!!!\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 9 #"displayln"
0 0 25 3 2 #" ("
0 0 14 3 7 #"syntax?"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 7 #"program"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             )"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"           )]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 4 #"next"
0 0 25 3 4 #")) ("
0 0 14 3 7 #"syntax?"
0 0 25 3 1 #" "
0 0 14 3 4 #"next"
0 0 25 3 3 #") ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 25 3 1 #" "
0 0 14 3 4 #"next"
0 0 25 3 6 #")))) ("
0 0 14 3 4 #"loop"
0 0 25 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 25 3 1 #" "
0 0 14 3 4 #"next"
0 0 25 3 3 #") ("
0 0 14 3 3 #"car"
0 0 25 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 25 3 1 #" "
0 0 14 3 4 #"next"
0 0 25 3 4 #")) ("
0 0 14 3 3 #"cdr"
0 0 25 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 25 3 1 #" "
0 0 14 3 4 #"next"
0 0 25 3 3 #")) "
0 0 14 3 7 #"current"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"      [("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 2 #"or"
0 0 25 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 25 3 1 #" "
0 0 14 3 4 #"next"
0 0 25 3 3 #") ("
0 0 14 3 7 #"syntax?"
0 0 25 3 1 #" "
0 0 14 3 4 #"next"
0 0 25 3 5 #"))) ("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 19 3 42 #"\"$$$$$$$$$$$$$$$ End File $$$$$$$$$$$$$$$\""
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 19 3 54 #"\"!!!!!!!!!!!!!!!! Case not Supported !!!!!!!!!!!!!!!!\""
0 0 25 3 5 #")])) "
0 0 17 3 44 #";this happens on a black file. Find out why."
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 14 #"\"[NEW TEST]  \""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 14 3 10 #"syntax-ret"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 25 3 2 #" ("
0 0 14 3 13 #"syntax->datum"
0 0 25 3 1 #" "
0 0 14 3 10 #"syntax-ret"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 11 #"syntax-list"
0 0 25 3 1 #" "
0 0 14 3 10 #"syntax-ret"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 26 #"\"[new test] Syntax-list  \""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 14 3 10 #"syntax-ret"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 13 #"explore-nodes"
0 0 25 3 1 #" "
0 0 14 3 10 #"syntax-ret"
0 0 25 3 2 #") "
0 0 17 3 18 #";TODO change this."
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 25 3 2 #" ("
0 0 14 3 13 #"syntax->datum"
0 0 25 3 1 #" "
0 0 14 3 7 #"program"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 136
(
 #"#|explore-nodes receives a syntax-list of the first level of the pro"
 #"gram, avoiding the need to explore every single node of the program."
) 0 0 17 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 17 29 1 #"\n"
0 0 17 3 3 #" |#"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"explore-nodes"
0 0 25 3 1 #" "
0 0 14 3 11 #"syntax-list"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 15 #"syntax-list-aux"
0 0 25 3 1 #" "
0 0 14 3 11 #"syntax-list"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 21 #"#|(define (next-node)"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"    ;check this out"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"    (displayln \"next node\")"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"    (set! level (sub1 level))"
0 0 17 29 1 #"\n"
0 0 17 3 32 #"    (set! offset (add1 offset)))"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"  (define (previous-node)"
0 0 17 29 1 #"\n"
0 0 17 3 37 #"    ;figure out what to do with this."
0 0 17 29 1 #"\n"
0 0 17 3 34 #"    (displayln \"previous node\"))|#"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 19 3 16 #"\"EXPLORING LIST\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 22 #";(check-next-offset)  "
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 14 3 11 #"syntax-list"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 14 #"\"[TEST] Car: \""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 11 #"syntax-list"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 25 #"\"[TEST] car + syntax-e: \""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 25 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 15 #"syntax-list-aux"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 19 3 19 #"\"[FIND-Everything]\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 15 #"find-everything"
0 0 25 3 1 #" "
0 0 14 3 15 #"syntax-list-aux"
0 0 25 3 1 #" "
0 0 22 3 2 #"#'"
0 0 14 3 2 #"if"
0 0 25 3 2 #") "
0 0 17 3 18 #";TODO change this."
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 46 #";;;;;;;;;; Definitions of Search ;;;;;;;;;;;;;"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 15 #"syntax-list-aux"
0 0 25 3 1 #" "
0 0 14 3 11 #"syntax-list"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"stack"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"level"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 6 #"offset"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 13 #"previous-node"
0 0 25 3 1 #" "
0 0 14 3 4 #"null"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 4 #"node"
0 0 25 3 1 #" "
0 0 14 3 4 #"null"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"next-node"
0 0 25 3 1 #" "
0 0 14 3 4 #"null"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"reset-offset"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 6 #"offset"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 47 #";;;;;;;;;;;;;; Important Function ;;;;;;;;;;;;;"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 15 #"find-everything"
0 0 25 3 1 #" "
0 0 14 3 6 #"source"
0 0 25 3 1 #" "
0 0 14 3 13 #"syntax-wanted"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 1 #" "
0 0 14 3 6 #"source"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 12 #"source-stack"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 3 #")) "
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 6 #"result"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 22 #";; stores everything!!"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 15 #"selected-search"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 1 #" "
0 0 14 3 10 #"line-begin"
0 0 25 3 1 #" "
0 0 14 3 8 #"line-end"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 12 #"source-stack"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 19 3 31 #"\"[Selected-search] End of file\""
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"          [("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 17 3 23 #";; checks if it is null"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 16 #"\"#;Null Found: \""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 12 #"source-stack"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 12 #"source-stack"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 12 #"source-stack"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 15 #"selected-search"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 1 #" "
0 0 14 3 10 #"line-begin"
0 0 25 3 1 #" "
0 0 14 3 8 #"line-end"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"          [("
0 0 14 3 5 #"pair?"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 19 3 22 #"\"Selected-search pair\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 12 #"source-stack"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 2 #") "
0 0 14 3 12 #"source-stack"
0 0 25 3 3 #")) "
0 0 17 3 14 #";;add to stack"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 15 #"selected-search"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 1 #" "
0 0 14 3 10 #"line-begin"
0 0 25 3 1 #" "
0 0 14 3 8 #"line-end"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"          [("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 7 #"syntax?"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 3 #") ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 25 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 17 3 22 #";;Compare line numbers"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 41 #"\"[Selected-search] Special Line Number: \""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 7 #"display"
0 0 25 3 2 #" ("
0 0 14 3 11 #"syntax-line"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 11 #"\" Syntax: \""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 15 3 4 #"when"
0 0 25 3 2 #" ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 4 #")) ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 6 #"result"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 2 #") "
0 0 14 3 6 #"result"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 12 #"source-stack"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 12 #"source-stack"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 12 #"source-stack"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 15 #"selected-search"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 1 #" "
0 0 14 3 10 #"line-begin"
0 0 25 3 1 #" "
0 0 14 3 8 #"line-end"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"             )]"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"          [("
0 0 14 3 7 #"syntax?"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 2 #") "
0 0 17 3 32 #";this shows first! that is good."
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 17 3 40 #";(set! source-aux (syntax-e source-aux))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 43 #"\"[Selected-search]  [Test]   Line Number: \""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 9 #"displayln"
0 0 25 3 2 #" ("
0 0 14 3 11 #"syntax-line"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 11 #"compare-aux"
0 0 25 3 2 #" ("
0 0 14 3 11 #"syntax-line"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 5 #"real?"
0 0 25 3 1 #" "
0 0 14 3 11 #"compare-aux"
0 0 25 3 3 #") ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 10 #"line-begin"
0 0 25 3 2 #" ("
0 0 14 3 11 #"syntax-line"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 2 #") "
0 0 14 3 8 #"line-end"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 12 #"source-stack"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 12 #"source-stack"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 12 #"source-stack"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 4 #"))) "
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 15 #"selected-search"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 1 #" "
0 0 14 3 10 #"line-begin"
0 0 25 3 1 #" "
0 0 14 3 8 #"line-end"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 19 3 48 #"\"[Find-everything] Selected-search Else reached\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 12 #"source-stack"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 12 #"source-stack"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 12 #"source-stack"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 15 #"selected-search"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 1 #" "
0 0 14 3 10 #"line-begin"
0 0 25 3 1 #" "
0 0 14 3 8 #"line-end"
0 0 25 3 4 #"))])"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 11 #"deep-search"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"deep-search"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 24 #";(display \"source-aux \")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 23 #";(displayln source-aux)"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 12 #"source-stack"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 15 3 5 #"begin"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 32 #"\"[Find-everything] End of file \""
0 0 25 3 4 #"))] "
0 0 25 29 1 #"\n"
0 0 25 3 12 #"          [("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 17 3 23 #";; checks if it is null"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 32 #"\"[Find-everything] Null Found: \""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 12 #"source-stack"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 12 #"source-stack"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 12 #"source-stack"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 11 #"deep-search"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 4 #"))] "
0 0 17 3 7 #";;stop?"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"          [("
0 0 14 3 5 #"pair?"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 17 3 25 #";;will be evaluated after"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 12 #"source-stack"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 2 #") "
0 0 14 3 12 #"source-stack"
0 0 25 3 3 #")) "
0 0 17 3 14 #";;add to stack"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 11 #"deep-search"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 4 #"))] "
0 0 17 3 21 #";;car, next evaluated"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"          [("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 7 #"syntax?"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 3 #") ("
0 0 14 3 3 #"not"
0 0 25 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 25 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 17 3 23 #";; checks if it is null"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 43 #"\"[Find-everything] Identifier found Line: \""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 7 #"display"
0 0 25 3 2 #" ("
0 0 14 3 11 #"syntax-line"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 12 #"\"   Type:  \""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 15 3 4 #"when"
0 0 25 3 2 #" ("
0 0 14 3 14 #"compare-syntax"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 1 #" "
0 0 14 3 13 #"syntax-wanted"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 54 #"\"!!!!!!!!!!!!!!!!!!!!!MATCH!!!!!!!!!!!!!!!!!!!!!!!!! \""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 12 #"source-stack"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 12 #"source-stack"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 12 #"source-stack"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 11 #"deep-search"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ]"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"          [("
0 0 14 3 7 #"syntax?"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 16 #"\"[Syntax Found]\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 11 #"deep-search"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 19 3 46 #"\"[Find-everything] [deep-search] Else reached\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 12 #"source-stack"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 12 #"source-stack"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 12 #"source-stack"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 11 #"deep-search"
0 0 25 3 1 #" "
0 0 14 3 10 #"source-aux"
0 0 25 3 5 #"))]))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 19 3 18 #"\"Selected Search:\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 14 3 6 #"source"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 15 #"selected-search"
0 0 25 3 1 #" "
0 0 14 3 6 #"source"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"9"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #" ("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 14 3 6 #"result"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 14 3 6 #"result"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 11 #"deep-search"
0 0 25 3 1 #" "
0 0 14 3 6 #"source"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 50 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 17 #"check-next-offset"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 3 #"aux"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 6 #"offset"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 8 #"aux-list"
0 0 25 3 1 #" "
0 0 14 3 15 #"syntax-list-aux"
0 0 25 3 2 #") "
0 0 17 3 14 #";correct level"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"check-offset"
0 0 25 3 1 #" "
0 0 14 3 5 #"value"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 14 3 5 #"value"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 22 3 2 #"#t"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 25 3 1 #" "
0 0 14 3 8 #"aux-list"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 8 #"aux-list"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 8 #"aux-list"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 12 #"check-offset"
0 0 25 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 25 3 1 #" "
0 0 14 3 5 #"value"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              )"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"            "
0 0 22 3 2 #"#f"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 16 #"check-offset-aux"
0 0 25 3 1 #" "
0 0 14 3 11 #"next-offset"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 25 3 1 #" "
0 0 14 3 8 #"aux-list"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 22 3 2 #"#t"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 22 3 2 #"#f"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 14 3 9 #"displayln"
0 0 25 3 2 #" ("
0 0 14 3 12 #"check-offset"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 20 #"\"[checkoffset] test\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 9 #"displayln"
0 0 25 3 2 #" ("
0 0 14 3 16 #"check-offset-aux"
0 0 25 3 1 #" "
0 0 14 3 3 #"aux"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 9 #"displayln"
0 0 25 3 2 #" ("
0 0 14 3 12 #"check-offset"
0 0 25 3 1 #" "
0 0 14 3 3 #"aux"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 8 #"aux-list"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 22 3 2 #"#f"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 16 #"check-offset-aux"
0 0 25 3 1 #" "
0 0 14 3 3 #"aux"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  )"
0 0 25 29 1 #"\n"
0 0 17 3 58
#"#|Level increases when entering a syntax object (syntax-e)"
0 0 17 29 1 #"\n"
0 0 17 3 93
(
 #"    If previous-node is null and level is > 0 you go down a level to"
 #" the corresponding offset"
) 0 0 17 29 1 #"\n"
0 0 17 3 84
(
 #"    If next-node is null It may assume that you finish the syntax ob"
 #"ject, you can go"
) 0 0 17 29 1 #"\n"
0 0 17 3 118
(
 #" to the next syntax object, by going up a level and increasing the o"
 #"ffset. If that is not possible it ends the search."
) 0 0 17 29 1 #"\n"
0 0 17 3 50 #"    Selecting a syntax object increases the level."
0 0 17 29 1 #"\n"
0 0 17 3 57 #"    Going to the next syntax object increases the offset."
0 0 17 29 1 #"\n"
0 0 17 3 5 #"   |#"
0 0 25 29 1 #"\n"
0 8         847 4 2 #"(\0"
2 #")\0"
168 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 6 #"define"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 11 #"go-to-place"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"level"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"offset"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 11 #"syntax-list"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 67
#";this function does not have tests. all checks must be done before."
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 7 #"display"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 23 #"\"[GO-TO-PLACE] level: \""
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 9 #"displayln"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"level"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 7 #"display"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 24 #"\"[GO-TO-PLACE] offset: \""
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 9 #"displayln"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"offset"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 2 #"if"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #"="
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"0"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"level"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"offset"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"      "
7 #"wxtext\0"
3 11 #"syntax-list"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 7 #"      ("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 3 #"and"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 11 #"          ("
7 #"wxtext\0"
3 3 #"not"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"pair?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 11 #"syntax-list"
7 #"wxtext\0"
3 4 #")) ("
7 #"wxtext\0"
3 7 #"syntax?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 11 #"syntax-list"
7 #"wxtext\0"
3 3 #")) "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"         ("
7 #"wxtext\0"
3 5 #"begin"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 12 #"           ("
7 #"wxtext\0"
3 7 #"display"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 16 #"\"[GO-TO-PLACE] \""
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 12 #"           ("
7 #"wxtext\0"
3 9 #"displayln"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 11 #"syntax-list"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 12 #"           ("
7 #"wxtext\0"
3 11 #"go-to-place"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"level"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"offset"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 8 #"syntax-e"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 11 #"syntax-list"
7 #"wxtext\0"
3 4 #")))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 1 #">"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"level"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"0"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"         ("
7 #"wxtext\0"
3 5 #"begin"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 12 #"           ("
7 #"wxtext\0"
3 9 #"displayln"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 29 #"\"[GO-TO-PLACE] Level entered\""
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 12 #"           ("
7 #"wxtext\0"
3 11 #"go-to-place"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"sub1"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"level"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 6 #"offset"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 3 #"car"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 11 #"syntax-list"
7 #"wxtext\0"
3 4 #")))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"        [("
7 #"wxtext\0"
3 1 #">"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"offset"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"0"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 11 #"go-to-place"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"level"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"sub1"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"offset"
7 #"wxtext\0"
3 3 #") ("
7 #"wxtext\0"
3 3 #"cdr"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 11 #"syntax-list"
7 #"wxtext\0"
3 3 #"))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ["
7 #"wxtext\0"
3 4 #"else"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 10 #"         ("
7 #"wxtext\0"
3 5 #"begin"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 12 #"           ("
7 #"wxtext\0"
3 9 #"displayln"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 54 #"\"!!!!!!!!!!!!!!!! Case not Supported !!!!!!!!!!!!!!!!\""
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 12 #"           ("
7 #"wxtext\0"
3 11 #"syntax-list"
7 #"wxtext\0"
3 6 #"))])))"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 8         527 4 2 #"(\0"
2 #")\0"
104 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 6 #"define"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 20 #"select-syntax-object"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 13 #";down a level"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 10 #";do checks"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 2 #"if"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 5 #"null?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 15 #"syntax-list-aux"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 7 #"       "
7 #"wxtext\0"
3 4 #"null"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 8 #"       ("
7 #"wxtext\0"
3 2 #"if"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 7 #"syntax?"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 3 #"car"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 15 #"syntax-list-aux"
7 #"wxtext\0"
3 3 #")) "
7 #"wxtext\0"
3 48 #";selects the syntax-object to further inspection"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 12 #"           ("
7 #"wxtext\0"
3 5 #"begin"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 14 #"             ("
7 #"wxtext\0"
3 9 #"displayln"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 18 #"\"Selecting syntax\""
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 14 #"             ("
7 #"wxtext\0"
3 4 #"set!"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"stack"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"cons"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 3 #"car"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 15 #"syntax-list-aux"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 5 #"stack"
7 #"wxtext\0"
3 3 #" ))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 14 #"             ("
7 #"wxtext\0"
3 4 #"set!"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 15 #"syntax-list-aux"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 8 #"syntax-e"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 3 #"car"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 15 #"syntax-list-aux"
7 #"wxtext\0"
3 4 #"))) "
7 #"wxtext\0"
3 34 #";should it be done in go-to-place?"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 14 #"             ("
7 #"wxtext\0"
3 4 #"set!"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"level"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"add1"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"level"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 14 #"             ("
7 #"wxtext\0"
3 12 #"reset-offset"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 14 #"             ("
7 #"wxtext\0"
3 11 #"go-to-place"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"level"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"offset"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 11 #"syntax-list"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 12 #"           ("
7 #"wxtext\0"
3 5 #"begin"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 14 #"             ("
7 #"wxtext\0"
3 9 #"displayln"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 47 #"\"[exit-syntax-object] error: It's not a syntax\""
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 13 #"             "
7 #"wxtext\0"
3 4 #"null"
7 #"wxtext\0"
3 4 #"))))"
0 0 25 29 1 #"\n"
0 8         412 4 2 #"(\0"
2 #")\0"
81 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 6 #"define"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 18 #"exit-syntax-object"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 11 #";up a level"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 2 #"if"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #">"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"level"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"0"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 7 #"      ("
7 #"wxtext\0"
3 5 #"begin"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 9 #"displayln"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 20 #"\"going up to Parent\""
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 4 #"set!"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"level"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"sub1"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"level"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 12 #"reset-offset"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 35 #";reset offset Maybe create function"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 4 #"set!"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"stack"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"stack"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 4 #"set!"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 15 #"syntax-list-aux"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"stack"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 11 #"go-to-place"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"level"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"offset"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 11 #"syntax-list"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 7 #"      ("
7 #"wxtext\0"
3 5 #"begin"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 9 #"displayln"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 48 #"\"[exit-syntax-object] error: level is already 0\""
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 8 #"        "
7 #"wxtext\0"
3 4 #"null"
7 #"wxtext\0"
3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 8         487 4 2 #"(\0"
2 #")\0"
96 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 6 #"define"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 18 #"next-syntax-object"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 9 #"displayln"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 21 #"\"[Get-syntax-object]\""
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 2 #"if"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 17 #"check-next-offset"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"      "
7 #"wxtext\0"
3 60 #";it only checks the next offset, should it go up one level? "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 7 #"      ("
7 #"wxtext\0"
3 5 #"begin"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 9 #"displayln"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 13 #"\"Next Syntax\""
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 4 #"set!"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"offset"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"add1"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"offset"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 11 #"go-to-place"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"level"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"offset"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 11 #"syntax-list"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 7 #"      ("
7 #"wxtext\0"
3 5 #"begin"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 8 #"        "
7 #"wxtext\0"
3 92
(
 #";(displayln \"[exit-syntax-object] error: There is no next syntax (c"
 #"an not increase offset)\")"
) 7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 2 #"if"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #">"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"level"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"0"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 13 #"            ("
7 #"wxtext\0"
3 5 #"begin"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 15 #"              ("
7 #"wxtext\0"
3 9 #"displayln"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 38 #"\"[Up-a-Level] can not increase offset\""
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 15 #"              ("
7 #"wxtext\0"
3 18 #"exit-syntax-object"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 15 #"              ("
7 #"wxtext\0"
3 18 #"next-syntax-object"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 13 #"            ("
7 #"wxtext\0"
3 5 #"begin"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 15 #"              ("
7 #"wxtext\0"
3 9 #"displayln"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 75
(
 #"\"[exit-syntax-object] error: can not increase offset (end of the pr"
 #"ogram) \""
) 7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 14 #"              "
7 #"wxtext\0"
3 4 #"null"
7 #"wxtext\0"
3 5 #")))))"
0 0 25 29 1 #"\n"
0 8         447 4 2 #"(\0"
2 #")\0"
88 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 6 #"define"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 22 #"previous-syntax-object"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 43 #";or sub1 in the level and return void/error"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 3 #"  ("
7 #"wxtext\0"
3 2 #"if"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #">"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"offset"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"0"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 7 #"      ("
7 #"wxtext\0"
3 5 #"begin"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 9 #"displayln"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 17 #"\"Previous syntax\""
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 4 #"set!"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"offset"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"sub1"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"offset"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 11 #"go-to-place"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"level"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 6 #"offset"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 11 #"syntax-list"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 7 #"      ("
7 #"wxtext\0"
3 5 #"begin"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 2 #"if"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 1 #">"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"level"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"0"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 13 #"            ("
7 #"wxtext\0"
3 5 #"begin"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 15 #"              ("
7 #"wxtext\0"
3 9 #"displayln"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 38 #"\"[Up-a-Level] can not increase offset\""
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 15 #"              ("
7 #"wxtext\0"
3 18 #"exit-syntax-object"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 15 #"              ("
7 #"wxtext\0"
3 18 #"next-syntax-object"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 13 #"            ("
7 #"wxtext\0"
3 9 #"displayln"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 76
(
 #"\"[exit-syntax-object] error: can not decrease offset (start of the "
 #"program)\""
) 7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 8 #"        "
7 #"wxtext\0"
3 4 #"null"
7 #"wxtext\0"
3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"go-deep"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"void"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 46 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 41 #";;;;;;;;;; Search Syntax ;;;;;;;;;;;;;;;;"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 14 #"compare-syntax"
0 0 25 3 1 #" "
0 0 14 3 7 #"current"
0 0 25 3 1 #" "
0 0 14 3 13 #"syntax-wanted"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 45 #";Receives 2 syntax objects. create contract? "
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"when"
0 0 25 3 2 #" ("
0 0 14 3 11 #"identifier?"
0 0 25 3 1 #" "
0 0 14 3 7 #"current"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 17 3 39 #"#|(display \"Checking syntax: Current \")"
0 0 17 29 1 #"\n"
0 0 17 3 23 #"      (display current)"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"      (display \"  Wanted \")"
0 0 17 29 1 #"\n"
0 0 17 3 31 #"      (displayln syntax-wanted)"
0 0 17 29 1 #"\n"
0 0 17 3 61
#"      (displayln (free-identifier=? current syntax-wanted))|#"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 17 #"free-identifier=?"
0 0 25 3 1 #" "
0 0 14 3 7 #"current"
0 0 25 3 1 #" "
0 0 14 3 13 #"syntax-wanted"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 18 #"find-syntax-object"
0 0 25 3 1 #" "
0 0 14 3 6 #"source"
0 0 25 3 1 #" "
0 0 14 3 13 #"syntax-wanted"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"go-deep"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 22 #"get-next-syntax-object"
0 0 25 3 1 #" "
0 0 14 3 6 #"source"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 18 #"next-syntax-object"
0 0 25 3 3 #")) "
0 0 17 3 42 #";FIX-ME ignoring source, using syntax-list"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 1 #" "
0 0 14 3 4 #"loop"
0 0 25 3 3 #" (("
0 0 14 3 6 #"source"
0 0 25 3 1 #" "
0 0 14 3 6 #"source"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 13 #"syntax-wanted"
0 0 25 3 1 #" "
0 0 14 3 13 #"syntax-wanted"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 13 #"syntax-tested"
0 0 25 3 2 #" ("
0 0 14 3 22 #"get-next-syntax-object"
0 0 25 3 1 #" "
0 0 14 3 6 #"source"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 16 #";update source!!"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 4 #"when"
0 0 25 3 2 #" ("
0 0 14 3 7 #"syntax?"
0 0 25 3 1 #" "
0 0 14 3 13 #"syntax-tested"
0 0 25 3 2 #") "
0 0 17 3 23 #";; Fix-me Never true..."
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 31 #"\"[Find-syntax] Syntax-tested: \""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 14 3 13 #"syntax-tested"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 11 #"identifier?"
0 0 25 3 1 #" "
0 0 14 3 13 #"syntax-tested"
0 0 25 3 3 #") ("
0 0 14 3 14 #"compare-syntax"
0 0 25 3 1 #" "
0 0 14 3 13 #"syntax-tested"
0 0 25 3 1 #" "
0 0 14 3 13 #"syntax-wanted"
0 0 25 3 3 #")) "
0 0 22 3 2 #"#t"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"          [ ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 13 #"syntax-tested"
0 0 25 3 3 #") ("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 19 3 33 #"\"[Find-Syntax] Stopped it's null\""
0 0 25 3 3 #" )]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 4 #"loop"
0 0 25 3 1 #" "
0 0 14 3 6 #"source"
0 0 25 3 1 #" "
0 0 14 3 13 #"syntax-wanted"
0 0 25 3 2 #" ("
0 0 14 3 22 #"get-next-syntax-object"
0 0 25 3 1 #" "
0 0 14 3 6 #"source"
0 0 25 3 6 #"))])))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 41 #";;;;;;;;;; Search Patterns ;;;;;;;;;;;;;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 45 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  "
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"code-walker"
0 0 25 3 1 #" "
0 0 14 3 4 #"code"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 11 #"program-aux"
0 0 25 3 1 #" "
0 0 14 3 17 #"program-structure"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"go-to-syntax"
0 0 25 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 25 3 1 #" "
0 0 14 3 4 #"code"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 7 #"visited"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 22 #"\"Code-walker visited \""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 14 3 7 #"visited"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 25 #"; (save-expanded-program)"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 24 #";(save-expanded-program)"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 9 #"displayln"
0 0 25 3 1 #" "
0 0 19 3 10 #"\"END FILE\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 32 #"#|(displayln  program-structure)"
0 0 17 29 1 #"\n"
0 0 17 3 46 #"  #;(for ((sexp (in-list  program-structure)))"
0 0 17 29 1 #"\n"
0 0 17 3 23 #"      (displayln sexp))"
0 0 17 29 1 #"\n"
0 0 17 3 30 #"  #;(displayln (syntax? code))"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"  #;(displayln (identifier? code))"
0 0 17 29 1 #"\n"
0 0 17 3 36 #"  #;(displayln (syntax-source code))"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"  #;(displayln (syntax-line code))"
0 0 17 29 1 #"\n"
0 0 17 3 36 #"  #;(displayln (syntax-column code))"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 17 29 1 #"\n"
0 0 17 3 72
(
 #"  #;(displayln code) ;in theory this is the syntax object of the pro"
 #"gram"
) 0 0 17 29 1 #"\n"
0 0 17 3 17 #"  ;test One layer"
0 0 17 29 1 #"\n"
0 0 17 3 31 #"  #;(displayln (syntax-e code))"
0 0 17 29 1 #"\n"
0 0 17 3 18 #"  ;test EVERYTHING"
0 0 17 29 1 #"\n"
0 0 17 3 39 #"  #;(displayln (syntax->datum code)) |#"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 15 #"#|;midle steps!"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 17 29 1 #"\n"
0 0 17 3 52 #"  (display \"[TEST-Middle] Syntax-e car Syntax-List\")"
0 0 17 29 1 #"\n"
0 0 17 3 48 #"  (displayln (syntax-e (car (syntax-list-aux))))"
0 0 17 29 1 #"\n"
0 0 17 3 57
#"  (display \"[TEST-Middle] Syntax-e car cdr + previous: \")"
0 0 17 29 1 #"\n"
0 0 17 3 71
(
 #"  (displayln (syntax-e (car (cdr (syntax-e (car (syntax-list-aux))))"
 #")))"
) 0 0 17 29 1 #"\n"
0 0 17 3 57
#"  (display \"[TEST-Middle] Syntax-e cdr cdr + previous: \")"
0 0 17 29 1 #"\n"
0 0 17 3 94
(
 #"  (displayln (syntax-e (cdr (cdr (syntax-e (car (cdr (syntax-e (car "
 #"(syntax-list-aux))))))))))"
) 0 0 17 29 1 #"\n"
0 0 17 3 53 #"  (display \"[TEST-Middle] Syntax-e car + previous: \")"
0 0 17 29 1 #"\n"
0 0 17 3 111
(
 #"  (displayln (syntax-e (car (syntax-e (cdr (cdr (syntax-e (car (cdr "
 #"(syntax-e (car (syntax-list-aux))))))))))))"
) 0 0 17 29 1 #"\n"
0 0 17 3 4 #"  |#"
0 0 25 29 1 #"\n"
0 0 17 3 8 #";test if"
0 0 25 29 1 #"\n"
0 0 17 3 45 #"#|(displayln \"[Exploring nodes] [TEST IF]  \")"
0 0 17 29 1 #"\n"
0 0 17 3 18 #"  (displayln (car "
0 0 17 29 1 #"\n"
0 0 17 3 128
(
 #"              (syntax-e (car (syntax-e (cdr (cdr (syntax-e (car (cdr"
 #" (syntax-e (cdr (syntax-e (car syntax-list-aux))))))))))))))"
) 0 0 17 29 1 #"\n"
0 0 17 3 51 #"  (displayln \"[Exploring nodes] [TEST IF- NEXT]  \")"
0 0 17 29 1 #"\n"
0 0 17 3 33 #"  (displayln (car (syntax-e (car "
0 0 17 29 1 #"\n"
0 0 17 3 39 #"                             (syntax-e "
0 0 17 29 1 #"\n"
0 0 17 3 35 #"                              (cdr "
0 0 17 29 1 #"\n"
0 0 17 3 36 #"                               (cdr "
0 0 17 29 1 #"\n"
0 0 17 3 111
(
 #"                                (syntax-e (car (cdr (syntax-e (cdr ("
 #"syntax-e (car syntax-list-aux))))))))))))))"
) 0 0 17 29 1 #"\n"
0 0 17 3 42 #"  #;(display \"[TEST] FREE-IDENTIFIER=?: \")"
0 0 17 29 1 #"\n"
0 0 17 3 49 #"  #;(displayln (free-identifier=? (car (syntax-e "
0 0 17 29 1 #"\n"
0 0 17 3 43 #"                                      (car "
0 0 17 29 1 #"\n"
0 0 17 3 49 #"                                       (syntax-e "
0 0 17 29 1 #"\n"
0 0 17 3 45 #"                                        (cdr "
0 0 17 29 1 #"\n"
0 0 17 3 124
(
 #"                                         (cdr (syntax-e (car (cdr (s"
 #"yntax-e (cdr (syntax-e (car syntax-list-aux)))))))))))))"
) 0 0 17 29 1 #"\n"
0 0 17 3 38 #"                                #'if))"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"  (displayln \"[Test Parts] Begin\")"
0 0 17 29 1 #"\n"
0 0 17 3 44 #"  (display \"[Test Parts] first level (-4) \")"
0 0 17 29 1 #"\n"
0 0 17 3 46 #"  (displayln (syntax-e (car syntax-list-aux)))"
0 0 17 29 1 #"\n"
0 0 17 3 45 #"  (display \"[Test Parts] second level (-3) \")"
0 0 17 29 1 #"\n"
0 0 17 3 63
#"  (displayln (syntax-e (cdr (syntax-e (car syntax-list-aux)))))"
0 0 17 29 1 #"\n"
0 0 17 3 44 #"  (display \"[Test Parts] third level (-2) \")"
0 0 17 29 1 #"\n"
0 0 17 3 86
(
 #"  (displayln (syntax-e (car (cdr (syntax-e (cdr (syntax-e (car synta"
 #"x-list-aux))))))))"
) 0 0 17 29 1 #"\n"
0 0 17 3 45 #"  (display \"[Test Parts] fourth level (-1) \")"
0 0 17 29 1 #"\n"
0 0 17 3 109
(
 #"  (displayln (syntax-e (cdr (cdr (syntax-e (car (cdr (syntax-e (cdr "
 #"(syntax-e (car syntax-list-aux)))))))))))"
) 0 0 17 29 1 #"\n"
0 0 17 3 42 #"  (display \"[Test Parts] last level (0) \")"
0 0 17 29 1 #"\n"
0 0 17 3 126
(
 #"  (displayln (syntax-e (car (syntax-e (cdr (cdr (syntax-e (car (cdr "
 #"(syntax-e (cdr (syntax-e (car syntax-list-aux)))))))))))))"
) 0 0 17 29 1 #"\n"
0 0 17 3 33 #"  (displayln \"[Test Parts] END \")"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 17 29 1 #"\n"
0 0 17 3 37 #"  (displayln \"[Test Parts -2] Begin\")"
0 0 17 29 1 #"\n"
0 0 17 3 44 #"  (display \"[Test Parts] first level (-4) \")"
0 0 17 29 1 #"\n"
0 0 17 3 52 #"  (displayln (syntax-e (car (cdr syntax-list-aux))))"
0 0 17 29 1 #"\n"
0 0 17 3 47 #"  #;(display \"[Test Parts] second level (-3) \")"
0 0 17 29 1 #"\n"
0 0 17 3 65
#"  #;(displayln (syntax-e (cdr (syntax-e (car syntax-list-aux)))))"
0 0 17 29 1 #"\n"
0 0 17 3 46 #"  #;(display \"[Test Parts] third level (-2) \")"
0 0 17 29 1 #"\n"
0 0 17 3 88
(
 #"  #;(displayln (syntax-e (car (cdr (syntax-e (cdr (syntax-e (car syn"
 #"tax-list-aux))))))))"
) 0 0 17 29 1 #"\n"
0 0 17 3 47 #"  #;(display \"[Test Parts] fourth level (-1) \")"
0 0 17 29 1 #"\n"
0 0 17 3 111
(
 #"  #;(displayln (syntax-e (cdr (cdr (syntax-e (car (cdr (syntax-e (cd"
 #"r (syntax-e (car syntax-list-aux)))))))))))"
) 0 0 17 29 1 #"\n"
0 0 17 3 44 #"  #;(display \"[Test Parts] last level (0) \")"
0 0 17 29 1 #"\n"
0 0 17 3 128
(
 #"  #;(displayln (syntax-e (car (syntax-e (cdr (cdr (syntax-e (car (cd"
 #"r (syntax-e (cdr (syntax-e (car syntax-list-aux)))))))))))))"
) 0 0 17 29 1 #"\n"
0 0 17 3 33 #"  (displayln \"[Test Parts] END \")"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 17 29 1 #"\n"
0 0 17 3 37 #"  (displayln \"[Test Parts -3] Begin\")"
0 0 17 29 1 #"\n"
0 0 17 3 44 #"  (display \"[Test Parts] first level (-4) \")"
0 0 17 29 1 #"\n"
0 0 17 3 58
#"  (displayln (syntax-e (car (cdr (cdr syntax-list-aux)))))"
0 0 17 29 1 #"\n"
0 0 17 3 47 #"  #;(display \"[Test Parts] second level (-3) \")"
0 0 17 29 1 #"\n"
0 0 17 3 65
#"  #;(displayln (syntax-e (cdr (syntax-e (car syntax-list-aux)))))"
0 0 17 29 1 #"\n"
0 0 17 3 46 #"  #;(display \"[Test Parts] third level (-2) \")"
0 0 17 29 1 #"\n"
0 0 17 3 88
(
 #"  #;(displayln (syntax-e (car (cdr (syntax-e (cdr (syntax-e (car syn"
 #"tax-list-aux))))))))"
) 0 0 17 29 1 #"\n"
0 0 17 3 47 #"  #;(display \"[Test Parts] fourth level (-1) \")"
0 0 17 29 1 #"\n"
0 0 17 3 111
(
 #"  #;(displayln (syntax-e (cdr (cdr (syntax-e (car (cdr (syntax-e (cd"
 #"r (syntax-e (car syntax-list-aux)))))))))))"
) 0 0 17 29 1 #"\n"
0 0 17 3 44 #"  #;(display \"[Test Parts] last level (0) \")"
0 0 17 29 1 #"\n"
0 0 17 3 128
(
 #"  #;(displayln (syntax-e (car (syntax-e (cdr (cdr (syntax-e (car (cd"
 #"r (syntax-e (cdr (syntax-e (car syntax-list-aux)))))))))))))"
) 0 0 17 29 1 #"\n"
0 0 17 3 33 #"  (displayln \"[Test Parts] END \")"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 17 29 1 #"\n"
0 0 17 3 37 #"  (displayln \"[Test Parts -4] Begin\")"
0 0 17 29 1 #"\n"
0 0 17 3 44 #"  (display \"[Test Parts] first level (-4) \")"
0 0 17 29 1 #"\n"
0 0 17 3 64
#"  (displayln (syntax-e (car (cdr (cdr (cdr syntax-list-aux))))))"
0 0 17 29 1 #"\n"
0 0 17 3 47 #"  #;(display \"[Test Parts] second level (-3) \")"
0 0 17 29 1 #"\n"
0 0 17 3 65
#"  #;(displayln (syntax-e (cdr (syntax-e (car syntax-list-aux)))))"
0 0 17 29 1 #"\n"
0 0 17 3 46 #"  #;(display \"[Test Parts] third level (-2) \")"
0 0 17 29 1 #"\n"
0 0 17 3 88
(
 #"  #;(displayln (syntax-e (car (cdr (syntax-e (cdr (syntax-e (car syn"
 #"tax-list-aux))))))))"
) 0 0 17 29 1 #"\n"
0 0 17 3 47 #"  #;(display \"[Test Parts] fourth level (-1) \")"
0 0 17 29 1 #"\n"
0 0 17 3 111
(
 #"  #;(displayln (syntax-e (cdr (cdr (syntax-e (car (cdr (syntax-e (cd"
 #"r (syntax-e (car syntax-list-aux)))))))))))"
) 0 0 17 29 1 #"\n"
0 0 17 3 44 #"  #;(display \"[Test Parts] last level (0) \")"
0 0 17 29 1 #"\n"
0 0 17 3 128
(
 #"  #;(displayln (syntax-e (car (syntax-e (cdr (cdr (syntax-e (car (cd"
 #"r (syntax-e (cdr (syntax-e (car syntax-list-aux)))))))))))))"
) 0 0 17 29 1 #"\n"
0 0 17 3 34 #"  (displayln \"[Test Parts] END \") "
0 0 17 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 17 29 1 #"\n"
0 0 17 3 45 #"  (displayln \"[Test Parts SUPER TEST] Begin\")"
0 0 17 29 1 #"\n"
0 0 17 3 44 #"  (display \"[Test Parts] first level (-4) \")"
0 0 17 29 1 #"\n"
0 0 17 3 93
(
 #"  (displayln (syntax-e (car (cdr (cdr (syntax-e (car (cdr (cdr (cdr "
 #"syntax-list-aux))))))))))"
) 0 0 17 29 1 #"\n"
0 0 17 3 45 #"  (display \"[Test Parts] second level (-3) \")"
0 0 17 29 1 #"\n"
0 0 17 3 150
(
 #"  (displayln (syntax-e (car (syntax-e (car (syntax-e (cdr (cdr (synt"
 #"ax-e (car (cdr (cdr (syntax-e (car (cdr (cdr (cdr syntax-list-aux)))"
 #"))))))))))))))"
) 0 0 17 29 1 #"\n"
0 0 17 3 15 #"  (define test "
0 0 17 29 1 #"\n"
0 0 17 3 24 #"              (syntax-e "
0 0 17 29 1 #"\n"
0 0 17 3 20 #"               (car "
0 0 17 29 1 #"\n"
0 0 17 3 26 #"                (syntax-e "
0 0 17 29 1 #"\n"
0 0 17 3 22 #"                 (car "
0 0 17 29 1 #"\n"
0 0 17 3 125
(
 #"                  (syntax-e (cdr (cdr (syntax-e (car (cdr (cdr (synt"
 #"ax-e (car (cdr (cdr (cdr syntax-list-aux)))))))))))))))))"
) 0 0 17 29 1 #"\n"
0 0 17 3 29 #"  (displayln (keyword? test))"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"  (displayln (syntax? test))"
0 0 17 29 1 #"\n"
0 0 17 3 174
(
 #"  (displayln (compare-syntax (syntax-e (car (syntax-e (car (syntax-e"
 #" (cdr (cdr (syntax-e (car (cdr (cdr (syntax-e (car (cdr (cdr (cdr sy"
 #"ntax-list-aux)))))))))))))))) #'%app))"
) 0 0 17 29 1 #"\n"
0 0 17 3 46 #"  #;(display \"[Test Parts] third level (-2) \")"
0 0 17 29 1 #"\n"
0 0 17 3 135
(
 #"  #;(displayln (syntax-e (car (cdr (syntax-e (cdr (syntax-e (car (cd"
 #"r (cdr (syntax-e (car (cdr (cdr (cdr syntax-list-aux)))))))))))))))"
) 0 0 17 29 1 #"\n"
0 0 17 3 47 #"  #;(display \"[Test Parts] fourth level (-1) \")"
0 0 17 29 1 #"\n"
0 0 17 3 158
(
 #"  #;(displayln (syntax-e (cdr (cdr (syntax-e (car (cdr (syntax-e (cd"
 #"r (syntax-e (car (cdr (cdr (syntax-e (car (cdr (cdr (cdr syntax-list"
 #"-aux))))))))))))))))))"
) 0 0 17 29 1 #"\n"
0 0 17 3 44 #"  #;(display \"[Test Parts] last level (0) \")"
0 0 17 29 1 #"\n"
0 0 17 3 175
(
 #"  #;(displayln (syntax-e (car (syntax-e (cdr (cdr (syntax-e (car (cd"
 #"r (syntax-e (cdr (syntax-e (car (cdr (cdr (syntax-e (car (cdr (cdr ("
 #"cdr syntax-list-aux))))))))))))))))))))"
) 0 0 17 29 1 #"\n"
0 0 17 3 33 #"  (displayln \"[Test Parts] END \")"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 17 29 1 #"\n"
0 0 17 3 31 #"  #;(display \"[TEST-Compare] \")"
0 0 17 29 1 #"\n"
0 0 17 3 46 #"  #;(displayln (compare-syntax (car (syntax-e "
0 0 17 29 1 #"\n"
0 0 17 3 40 #"                                   (car "
0 0 17 29 1 #"\n"
0 0 17 3 46 #"                                    (syntax-e "
0 0 17 29 1 #"\n"
0 0 17 3 42 #"                                     (cdr "
0 0 17 29 1 #"\n"
0 0 17 3 128
(
 #"                                      (cdr (syntax-e (car (cdr (synt"
 #"ax-e (cdr (syntax-e (car syntax-list-aux))))))))))))) #'if))"
) 0 0 17 29 1 #"\n"
0 0 17 3 2 #"  "
0 0 17 29 1 #"\n"
0 0 17 3 41 #"  (display \"[TEST-Find-Syntax-Object]  \")"
0 0 17 29 1 #"\n"
0 0 17 3 57 #"  #;(displayln (find-syntax-object syntax-list-aux #'if))"
0 0 17 29 1 #"\n"
0 0 17 3 41 #"  (display \"[TEST] pair? car+syntax-e: \")"
0 0 17 29 1 #"\n"
0 0 17 3 55 #"  (displayln (pair? (syntax-e (car syntax-list-aux)))) "
0 0 17 29 1 #"\n"
0 0 17 3 24 #"  (select-syntax-object)"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"  (displayln syntax-list-aux)"
0 0 17 29 1 #"\n"
0 0 17 3 22 #"  (exit-syntax-object)"
0 0 17 29 1 #"\n"
0 0 17 3 30 #"  (displayln syntax-list-aux) "
0 0 17 29 1 #"\n"
0 0 17 3 77
(
 #"  ;maybe going down to much, mixin between car and syntax-e. must ch"
 #"eck this."
) 0 0 17 29 1 #"\n"
0 0 17 3 46 #"  ;(displayln (go-to-place 0 2 syntax-list))  "
0 0 17 29 1 #"\n"
0 0 17 3 4 #"  |#"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0           0
